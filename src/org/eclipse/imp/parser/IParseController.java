package org.eclipse.imp.parser;

import java.util.List;

import lpg.runtime.IMessageHandler;
import lpg.runtime.IToken;

import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.imp.language.ILanguageService;
import org.eclipse.imp.model.ISourceProject;

public interface IParseController extends ILanguageService {
    void initialize(IPath projRelFilePath, ISourceProject project, IMessageHandler handler);

    ISourceProject getProject();

    /**
     * @return either a project-relative path, if getProject() is non-null, or an absolute path.
     */
    IPath getPath();

    IParser getParser();

    ILexer getLexer();

    Object getCurrentAst();

    boolean isKeyword(int kind);

    char [][] getKeywords();
    
    public String getSingleLineCommentPrefix();

    public int getTokenIndexAtCharacter(int offset);

    public IToken getTokenAtCharacter(int offset);

    IASTNodeLocator getNodeLocator();

    boolean hasErrors();

    /**
     * @return a List of ParseError
     */
    List getErrors();

    Object parse(String input, boolean scanOnly, IProgressMonitor monitor);
    
    
    /*
     * Operations related to the management of marker types that may be
     * provided by clients of the parse controler; may be used by cooperating
     * clients, e.g., editors and builders, to share marker types.
     * 
     * This is probably a temporary expedient until a more general scheme
     * of marker management across IDE services can be developed
     * SMS 31 May 2007
     */
    
	/**
	 * Add a type of problem marker to the list of problem marker
	 * types to which errors generated by this parser may correspond.
	 * 
	 * @param problemMarkerType	The name of the problem marker type
	 */
	public void addProblemMarkerType(String problemMarkerType);
	
	
	/**
	 * Provide the list of problem marker types to which errors
	 * generated by this parser may correspond.
	 * 
	 * @return	The list of problem marker types
	 */
	public List getProblemMarkerTypes();

	
	/**
	 * Remove a type of problem marker from the list of problem marker
	 * types to which errors generated by this parser may correspond.
	 * 
	 * @param problemMarkerType	The name of the problem marker type
	 */
	public void removeProblemMarkerType(String problemMarkerType);

}
